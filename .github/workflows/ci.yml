name: ECS Continuous Integration
run-name: ${{ github.actor }} is running Continuous Integration on GitHub Actions ðŸš€
on: [push]
env:
  # ECR_ENDPOINT: 255945442255.dkr.ecr.us-east-1.amazonaws.com
  ECR_ENDPOINT: public.ecr.aws/u2q1a2y8
jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Run installation of dependencies commands
        run: npm install

  code-unit-testing:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Run installation of dependencies commands
        run: npm install
      - name: Run unit testing command
        run: npm test

  code-vulnerability-scanning:
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
        - name: Check out repository code
          uses: actions/checkout@v3
        - name: Run vulernability scan
          run: |
            echo "To do"
            echo "Add scanning"

  build-and-scan-image:
    runs-on: ubuntu-latest
    needs: [code-unit-testing, code-vulnerability-scanning]
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Login to ECR
        # This run command is only applicable to private repositories.
        # run: aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_ENDPOINT }}
        # This run command is only applicable to public repositories.
        run: aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${{ env.ECR_ENDPOINT }}
      - name: Docker build and tag
        # 1. Retrieve an authentication token and authenticate your Docker client to your registry.
        # Use the AWS CLI:
        # aws ecr-public get-login-password --region us-east-1 | docker login --username AWS
        # --password-stdin public.ecr.aws/u2q1a2y8
        # Note: If you receive an error using the AWS CLI, make sure that you have the latest version of
        # the AWS CLI and Docker installed.
        # 2. Build your Docker image using the following command. For information on building a Docker file
        # from scratch see the instructions here . You can skip this step if your image is already built:
        # docker build -t soon-node-app .
        # 3. After the build completes, tag your image so you can push the image to this repository:
        # docker tag soon-node-app:latest public.ecr.aws/u2q1a2y8/soon-node-app:latest
        # 4. Run the following command to push this image to your newly created AWS repository:
        # docker push public.ecr.aws/u2q1a2y8/soon-node-app:latest
        run: |
          docker build -t ${{ vars.IMAGE_NAME }} .
          docker tag ${{ vars.IMAGE_NAME }}:latest ${{ env.ECR_ENDPOINT }}/${{ vars.IMAGE_NAME }}:latest
      - name: Run image scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ vars.IMAGE_NAME }}:latest'
          format: 'table'
          # exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'MEDIUM,HIGH,CRITICAL'
      - name: Docker publish to ECR
        run: docker push ${{ env.ECR_ENDPOINT }}/${{ vars.IMAGE_NAME }}:latest

  deploy-image-dev:
    needs: [build-and-scan-image]
    name: "Deployed image to dev"
    uses: sunnymoon1314/c5-container-cicd/.github/workflows/cd.yml@main
    with:
      target_env: "dev"
    secrets: inherit
    if: ${{ github.ref_name == 'main' || github.ref_name == 'develop' || startsWith(github.ref_name, 'feature/') }}

  deploy-image-uat:
    needs: [build-and-scan-image]
    name: "Deployed image to uat"
    uses: sunnymoon1314/c5-container-cicd/.github/workflows/cd.yml@main
    with:
      target_env: "uat"
    secrets: inherit
    if: ${{ startsWith(github.ref_name, 'release/') }}

  deploy-image-prod:
    needs: [build-and-scan-image, deploy-image-uat]
    name: "Deployed image to prod"
    uses: sunnymoon1314/c5-container-cicd/.github/workflows/cd.yml@main
    with:
      target_env: "prod"
    secrets: inherit
    if: ${{ startsWith(github.ref_name, 'release/') }}